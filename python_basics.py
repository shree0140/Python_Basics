# -*- coding: utf-8 -*-
"""Python_Basics.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ERdruD82A5i6eRD_j-owWPhVZO9L7_0N

**Python Basics**:

Print Method:
"""

print("Hello World of Python and Data Science.")

print("Hello World of Python and Data Science.", "String_2." , sep="Custom_sep.",end="Custom_end")

"""Escape Sequence characters:

"""

print("Hello World of Python. \'Hello World of Data Science.")     #\'

print("Hello World of Python. \nHello World of Data Science.")     #\n

print("Hello World of Python. \"Hello World of Data Science.")     #\"

print("Hello World of Python. \\ Hello World of Data Science.")     #\\

print("Hello World of Python. \t Hello World of Data Science.")     #t

print("Hello World of Python. \f Hello World of Data Science.")

"""Comments:"""

# print("Hello World of Python and Data Science.")
# print("Hello World of Python and Data Science.")
# print("Hello World of Python and Data Science.")
# print("Hello World of Python and Data Science.")

"""Variables:"""

a=1     #int
b=1.5      #float
c="String_data"   #String
d=True #Boolean_Data
e = complex(1,2)    #complex_number
print(e)

"""Multiple_Variables:"""

x,y,z = "red","blue","green"
print(x,y,z,sep="~")

colors=["red","blue","green"]       #Collection Unpacking (list,tuple)
x,y,z= colors
print(x,y,z, sep=" ~ ")

"""Typecasting:"""

a="1"
b="2"
print(a+b)              #String_Concatenation

print(int(a)+int(b))    #Explicit typecasting
c=3.5
d=4

e= c+d
print(e)              #Implicit typecasting

print(type(e))        #type_method- to tell datatype of variable

"""Users Input:"""

a = input()                          #by default str value
print(a)
print(type(a))

b=int(input("Enter a number:"))     #type casting value to int
print(b)
print(type(b))

x,y,z= input("Enter integer values for x,y,z:").split()
print(x,y,z)
print(type(x))
print(int(y))  #datatype change is not permanent to the variable
print(type(y))
print(type(int(y)))       #datatype change can be seen for that instance

"""String and String Methods:"""

text1="This is a one line test string\n"

text2='''This is a multiline test string
       and is divided in two parts.'''     #"""........""" can also be used for multilinr strings

print(text1)
print(text2)

word = "Python"
x=len(word)     #len method
print(x)

print(word[1])    #character at specific index from string

print(word[0:3])    #string slicing
print(word[:-1])

word = "Python"
print(word.upper()) #turns all characters in uppercase
print(word.lower())#turns all characters in lowercase
print(word.replace("Python", "Data_Science")) #replace the mentioned word with the provided word

text="Basics of Python!"
print(text.strip())  #Strips the mentioned character/ word from start or end of string
print(text.capitalize()) #Capitalizes first alphabet of string
print(text.istitle())  # returns true if all first characters of words in string are capital. else false
print(text.rstrip("!")) #strips mentioned thing from right end of string
print(text.split(" ")) #splits the string according to the mentioned character
print(text.endswith("!")) #returns bool val according to the match with string end
print(text.index("of"))  #returns index position of first occurance of word mentioned
print(text.swapcase()) #swaps the case of each character from string
print(text.title())  #convert first character of each word capital

"""if-else statement:"""

text=input("Enter a word: ")
print(text)

string_1= "Python is used for data science"
string_2= "Data Science is a growing field"
if text in string_1:                      #in, not in membership operators
  print("Present in str 1")
elif text in string_2:
  print("Present in str 2")
else:
  print("Not present")

"""Match Case Statement:"""

x= int(input("Enter a no between 0-3: "))
match x:
  case 0:
    print("no is 0")
  case 1:
    print("no is 1")
  case 2:
    print("no is 2")
  case 3:
    print("no is 3")
  case _:
    print("Default case")

"""For Loop and while loop:

"""

x=input("Enter numbers: ").split()
print(x)

for i in x:          #for loop
  print(int(i),end=" ")
print("\nAbove is output of for loop")

i = 0
while(i<5):                #while loop
  print(i,end=" ")
  i+=1
print("\nAbove is output of while loop")

"""Functions:

"""

def add_func(a,b):
  c=a+b
  print("The sum is:",c)
  return c


sum = add_func(2,3)
print("The summation using function is:", sum)

def add_func(*numbers):       # *Arbitary arguments
  sum=0
  for i in numbers:
    sum=sum+i
  return sum


sum = add_func(2,3,5,6,7)
print("The summation using function is:", sum)

def custom_method(**words):                                        #Keyword Arbitary arguments
  print("The two words are", words["first"],"and",words["second"])

custom_method(first="Data", second="Science")

"""Collections in python:

1) Lists
"""

list_1 = [i for i in range(10) if i%2==0]            #list comprehension
print(list_1)

print(list_1)
list_1.append(10)
print(list_1)

list_2=[1,2,3,4,5]
list_2.clear()
print(list_2)

list_2=[1,2,3,4,5]
list_3= list_2.copy()
print(list_3)

list_4= [1,2,3,4,4,4,5,6,7]
print("The count of 4's in list is: ", list_4.count(4))

list_5=[1,2,3,4,5]
list_6=[6,7,8,9]
list_5.extend(list_6)
print("Extended_list: ",list_5)

list_7=[1, 2, 3, 4, 5, 6, 7, 8, 9]
index=list_7.index(5)
print("Index position of 5 from list is:", index)

list_8=[1,2,4]
list_8.insert(2,3)
print(list_8)

list_9=[1,2,3,4,5]
list_9.pop()
print(list_9)
list_9.pop(1)
print(list_9)

list_10=[1,2,3,4,5,6,7]
list_10.remove(2)
print(list_10)

list_11=[1,2,3,4,5,6,7,8]
list_11.reverse()
print(list_11)

list_12=[2,4,6,1,8,5]
list_12.sort()
print(list_12)

list_13=[1,2,3]
list_14=[4,5,6]
concatenated_list= list_13 + list_14
print(concatenated_list)

"""2) Tuple:

- Almost similar methods as in Lists
"""

tuple_1=(1,2,3,4,5,5,5,5,6,7)
count = tuple_1.count(5)
print(count)

tuple_2=(1,2,3,4,5)
index_pos= tuple_2.index(4)
print('Index position of 4 is:',index_pos)

tuple_3=(1,2,3,4,5)           #modifying unchangeable tuple by coverting into list and then back to tuple
list_of_tuple = list(tuple_3)
print(list_of_tuple)
last_item=list_of_tuple.pop()
print(last_item)
tuple_again=tuple(list_of_tuple)
print(tuple_again)

"""3) Sets:"""

set_1={1,2,3,4,5,5,5,6,7}
print(set_1)

set_2={1,2,3,4,5,5,5}           #add method
set_2.add(6)
print(set_2)

set_2={1,2,3,4,5,5,5}
set_2.clear()                  #clear method
print(set_2)

set_2={1,2,3,4,5,5,5}
set_3=set_2.copy()
print(set_3)                        #copy method

set_4={1,2,3,4,5}
set_5={3,4,5,6,7}
difference_set= set_4.difference(set_5)             #difference method
print(difference_set)

set_4={1,2,3,4,5}
set_5={3,4,5,6,7}
set_4.difference_update(set_5)           #difference_update
print(set_4)

set_6={1,2,3,4,5}
set_6.discard(3)                   #discard method
print(set_6)

set_7={1,2,3,4,5}
set_8={5,6,7,8}
intersected_set = set_7.intersection(set_8)                        #intersection method
print(intersected_set)

set_7={1,2,3,4,5}
set_8={5,6,7,8}
set_7.intersection_update(set_8)                        #intersection update method
print(set_7)

set_9={1,2,3,4}
set_10={1,3,5,56}
set_11={9,7,8}
result_1=set_9.isdisjoint(set_10)      #is disjoint method
print(result_1)
result_2 = set_9.isdisjoint(set_11)
print(result_2)

set_9={1,2,3,4}
set_10={1,3}
set_11={4,9,7,8}
print(set_9.issuperset(set_10))
print(set_10.issuperset(set_9))     #superset method
print(set_9.issubset(set_10))
print(set_10.issubset(set_9))           #subset method

set_12={1,2,3,4,5}
output=set_12.pop()             #pop method
print(output)

set_12={1,2,3,4,5}
output=set_12.remove(2)              #remove method
print(set_12)
print(output)

set_13={1,2,3,4,5}
set_14={3,4,5,6,7}
sym_diff_set = set_13.symmetric_difference(set_14)             #symmetric difference method
print(sym_diff_set)

set_13={1,2,3,4,5}
set_14={3,4,5,6,7}
set_13.symmetric_difference_update(set_14)           #symmetric diffrence update
print(set_13)

set_13={1,2,3,4,5}
set_14={3,4,5,6,7}
union_set = set_13.union(set_14)                 #union method
print(union_set)

set_13={1,2,3,4,5}
set_14={3,4,5,6,7}
set_13.update(set_14)              #update method
print(set_13)

empty_set = set()                #to get empty set
print(empty_set)

"""4) Dictionary:"""

dict_1 ={"a":1,"b":2,"c":3}               #clear dic method
dict_1.clear()
print(dict_1)

dict_1 ={"a":1,"b":2,"c":3}
dict_2=dict_1.copy()              #copy dict method
print(dict_2)

keys=["a","b","c"]
default_val = 0                        #dict creation from list of keys with default value
new_dict = dict.fromkeys(keys,default_val)
print(new_dict)

dict_1 ={"a":1,"b":2,"c":3}
value = dict_1.get("b")                   #to get a val of key
print(value)

dict_1 ={"a":1,"b":2,"c":3}
items = dict_1.items()          #to get items of dict
print(items)

dict_1 ={"a":1,"b":2,"c":3}
keys=dict_1.keys()               #to get keys of dict
print(keys)

dict_1 ={"a":1,"b":2,"c":3}
values=dict_1.values()                    #to get values of dict
print(values)

dict_1 ={"a":1,"b":2,"c":3}
val=dict_1.pop("b")                     #to get specific value of certain key
print(val)

dict_1 ={"a":1,"b":2,"c":3}
item=dict_1.popitem()
print(item)                       #to get an arbitary item

dict_1 ={"a":1,"b":2,"c":3}
dict_2={"b":3, "c":4,"d":5}
dict_1.update(dict_2)
print(dict_1)                   #to update dict 1 with contents of dict 2

dict_1 ={"a":1,"b":2,"c":3}
val=dict_1.setdefault("d",4)                  #to set a key value pair
print(val)
print(dict_1)